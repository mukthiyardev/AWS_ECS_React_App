stages:
  - build
  - push

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE

*******************************************************************

CI_REGISTRY: Set it to your ACR login server, e.g., youracr.azurecr.io.
CI_REGISTRY_USER: Set it to your ACR username.
CI_REGISTRY_PASSWORD: Set it to your ACR password.
CI_REGISTRY_IMAGE:youracr.azurecr.io/yourimagename:latest
-----------------------------------------------------------------------------

deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "$KUBE_CONFIG" > kubeconfig.yml
    - kubectl --kubeconfig=kubeconfig.yml apply -f $KUBE_DEPLOYMENT_FILE --namespace=$KUBE_NAMESPACE
************************************************************************

Make sure to replace KUBE_NAMESPACE with the desired namespace and KUBE_DEPLOYMENT_FILE with the path to your Kubernetes deployment manifest file.


Using either of these options, replace your-namespace with the actual namespace name where you want to deploy your application.

$KUBE_DEPLOYMENT_FILE = deploy file name

kubectl get namespaces


-kubeconfig=kubeconfig.yml: This flag specifies the path to the kubeconfig file, which contains the configuration details required to authenticate and connect to a Kubernetes cluster. By specifying the --kubeconfig flag with the value kubeconfig.yml, it indicates that the kubectl command should use the configuration defined in the kubeconfig.yml file to connect to the cluster.
----------------------------------------------------------------------------------







image: node:16
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - b&p acr
  - deploy to K8S

build-job:
  stage: build
  script:
    - npm install
    - npm run build

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - main
    - develop

docker_build:
  stage: b&p acr
  image: docker:latest
  services:
    - docker:dind # allows developers to run a Docker container within an already running Docker container to support CI/CD pipelines.
  script:
    - docker build -t $ACR_REGISTRY_IMAGE:$CI_PIPELINE_IID .
    - docker login -u $ACR_REGISTRY_USER -p $ACR_REGISTRY_PASSWORD $ACR_REGISTRY
    - docker push $ACR_REGISTRY_IMAGE:$CI_PIPELINE_IID

deploy:
  stage: deploy to K8S
  image:
    name: bitnami/kubectl:1.14
    entrypoint: [""]
  script:
    - echo "$KUBE_CONFIG" > kubeconfig.yml
    - kubectl --kubeconfig=kubeconfig.yml apply -f $KUBE_DEPLOYMENT_FILE --namespace=$KUBE_NAMESPACE