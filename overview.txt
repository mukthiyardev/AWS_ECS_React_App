stages:
  - build
  - push

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE

*******************************************************************

CI_REGISTRY: Set it to your ACR login server, e.g., youracr.azurecr.io.
CI_REGISTRY_USER: Set it to your ACR username.
CI_REGISTRY_PASSWORD: Set it to your ACR password.
CI_REGISTRY_IMAGE:youracr.azurecr.io/yourimagename:latest
-----------------------------------------------------------------------------

deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "$KUBE_CONFIG" > kubeconfig.yml
    - kubectl --kubeconfig=kubeconfig.yml apply -f $KUBE_DEPLOYMENT_FILE --namespace=$KUBE_NAMESPACE
************************************************************************

Make sure to replace KUBE_NAMESPACE with the desired namespace and KUBE_DEPLOYMENT_FILE with the path to your Kubernetes deployment manifest file.


Using either of these options, replace your-namespace with the actual namespace name where you want to deploy your application.

$KUBE_DEPLOYMENT_FILE = deploy file name

kubectl get namespaces


-kubeconfig=kubeconfig.yml: This flag specifies the path to the kubeconfig file, which contains the configuration details required to authenticate and connect to a Kubernetes cluster. By specifying the --kubeconfig flag with the value kubeconfig.yml, it indicates that the kubectl command should use the configuration defined in the kubeconfig.yml file to connect to the cluster.
----------------------------------------------------------------------------------